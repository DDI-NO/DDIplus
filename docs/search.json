[
  {
    "objectID": "ddi_plus_paper.html",
    "href": "ddi_plus_paper.html",
    "title": "DDI Plus",
    "section": "",
    "text": "Reading dump file: /Users/freyta/Documents/Work/APGEM/data/exportado/ddi_plus_clinical_250401.csv\nIcnluded subjects: 90\nTotal observations: 136\nvisit_id\n1      90\n2      34\n3      10\n4       1\n101     1\nName: count, dtype: int64\nMean followup years: 3.44 (1.69)\nSum of followup years 151.41957563312803\nTotal mean followup years (N_subjects * mean_years) 309.72185924958006\n\n\n\n\nText(0, 0.5, '')"
  },
  {
    "objectID": "ddi_plus_eda.html",
    "href": "ddi_plus_eda.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport pyddi\n\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/fuzzywuzzy/fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\nxnatsubs = pd.read_csv('/Users/freyta/Documents/Work/APGEM/data/exportado/ddi_plus_xnat_subs.csv')\ndata = pyddi.read_dump(cohort='ddi_plus', postprocess=False, printfile=True)\ndata = data.query('included == True')\ndata.loc[data['stag_text'] == 'NN', 'stag_text'] = 'MCI'\n\nReading dump file: /Users/freyta/Documents/Work/APGEM/data/exportado/ddi_plus_clinical_250401.csv\nxnatsubs[~xnatsubs['label'].isin(data['subject_label'])]\n\n\n\n\n\n\n\n\nlabel\nexperiment_count\nincluded\nstatus\n_group\nsubj_group_text\n\n\n\n\n0\nD13097\n0\nFalse\nNaN\nDDI\nNaN\n\n\n1\nD13092\n0\nTrue\nwithdraw\nDDI\nNaN\n\n\n2\nD13096\n0\nTrue\nactive\nDDI\nNaN\n\n\n3\nD13098\n0\nTrue\nactive\nDDI\nNaN\n\n\n4\nD13095\n1\nTrue\nactive\nDDI\nNeuropsychiatric symptoms group\n\n\n15\nD13001\n8\nFalse\nNaN\nDDI\nCognitive symptom group\ndata['site'] = data['subject_label'].map(pyddi.site_from_subject_label)\ndata.site.value_counts()\n\nsite\nAhus    136\nName: count, dtype: int64\nI think we could look at - baseline sociodemographics (a table 1), - then explore clinical and biological variables, e.g. correlate 1) gds/madrs vs neuropsychology, 2) gds/madrs vs csf (which ones?), 3) gds/madrs vs mri (which ones?) - we could for instance see if higher baseline depression load is associated with worse cognitive performance and more organic pathology over time. - explore social variables as well: age of retirement, marital status, educational level. What do you think?\ntotal_subs = data['subject_label'].nunique()\ntotal_observations = len(data)\ngender_count = data.gender.value_counts()\ntotal_subs\nincluded_followups = data[(data['visit_id'] &gt; 1) & (data['visit_id'].isin([1, 2, 3, 4, 5, 6]))]\nmean_years_followup, sd_years_followup = included_followups.years_from_baseline.mean(), included_followups.years_from_baseline.std()\nprint('Icnluded subjects:', total_subs)\nprint('Total observations:', total_observations)\nprint(data.visit_id.value_counts())\nprint(f'Mean followup years: {mean_years_followup} ({sd_years_followup})')\nprint('Sum of followup years',included_followups['years_from_baseline'].sum())\nprint('Total mean followup years (N_subjects * mean_years)',mean_years_followup * total_subs)\n\nIcnluded subjects: 90\nTotal observations: 136\nvisit_id\n1      90\n2      34\n3      10\n4       1\n101     1\nName: count, dtype: int64\nMean followup years: 3.441353991662001 (1.6919026606947538)\nSum of followup years 151.41957563312803\nTotal mean followup years (N_subjects * mean_years) 309.72185924958006\npd.crosstab(data['stag_text'], data['a'])\n\n\n\n\n\n\n\na\n0.0\n1.0\n\n\nstag_text\n\n\n\n\n\n\nCN\n9\n0\n\n\nDementia\n0\n3\n\n\nMCI\n26\n35\n\n\nSCD\n9\n8\nI see 96 D12/D13 existing subjects in XNAT. 5 of them don’t have any experiment, of which one is not included in the study and another withdrew.\nAs of this morning, this is the available data: Icnluded subjects: 90 Total observations: 136 Follow-ups: 1: 90 2: 34 3: 10 4: 1\nMean followup years: 3.44 (1.69) Sum of followup years 151.41\nRegarding staging and amyloid status: - + CN 9 0 SCD 9 8 MCI 26 35 Dementia 0 3\nCN is Cognitively Normal\ndata[['subject_label', 'ugot_p217_plasma_mean','ugot_p217_csf_mean']]\ndata['ugot_p217_plasma_mean'].notna().sum(), data['ugot_p217_csf_mean'].notna().sum()\n\n(np.int64(98), np.int64(56))\npyddi.plot_at_progression_graph(data)\npyddi.plot_stage_progression_graph(data, stage_col='stag')\nmean_edu_years = data['edu_years'].mean()\nedu_years_sd = data['edu_years'].std()\ntotal_subs = data['subject_label'].nunique()\n\nprint(f\"N: {total_subs}\")\nprint(f\"Mean education years: {mean_edu_years:.2f} ({edu_years_sd:.2f})\")\nprint()\n\nbaseline = data.query('visit_id == 1')\nfirst_followup = data.query('visit_id == 2')\n\ndef print_baseline_stats(df):\n\n    total_subs = df['subject_label'].nunique()\n    \n    n_male = df.query('gender == \"male\"').shape[0]\n    n_female = df.query('gender == \"female\"').shape[0]\n    percentage_male = n_male / total_subs\n    mean_age = df['mh_age'].mean()\n    sd_age = df['mh_age'].std()\n    mean_mmse = df['mmse_total'].mean()\n    sd_mmse = df['mmse_total'].std()\n    mean_gds = df['gds_15_total'].mean()\n    sd_gds = df['gds_15_total'].std()\n    mean_madrs = df['madrs_score'].mean()\n    sd_madrs = df['madrs_score'].std()\n    \n    print(f\"N: {total_subs} ({percentage_male:.2%})\")\n    print(f\"Mean age: {mean_age:.2f} ({sd_age:.2f})\")\n    print(f\"Mean MMSE: {mean_mmse:.2f} ({sd_mmse:.2f})\")\n    print(f\"Mean GDS: {mean_gds:.2f} ({sd_gds:.2f})\")\n    print(f\"Mean MADRS: {mean_madrs:.2f} ({sd_madrs:.2f})\")\n\n# Example usage\nprint_baseline_stats(baseline)\nprint()\nprint_baseline_stats(first_followup)\n\nN: 90\nMean education years: 12.34 (2.99)\n\nN: 90 (34.44%)\nMean age: 73.08 (5.92)\nMean MMSE: 27.26 (2.91)\nMean GDS: 4.89 (3.96)\nMean MADRS: 11.71 (7.06)\n\nN: 34 (44.12%)\nMean age: 75.03 (6.11)\nMean MMSE: 26.30 (4.09)\nMean GDS: 4.90 (3.78)\nMean MADRS: 9.50 (5.85)"
  },
  {
    "objectID": "ddi_plus_eda.html#data-availability",
    "href": "ddi_plus_eda.html#data-availability",
    "title": "",
    "section": "Data availability",
    "text": "Data availability\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nsns.set_theme(style=\"whitegrid\", palette=\"husl\")\n\ndef plot_countplot(\n        data, \n        variable, \n        hue=None, \n        title='',\n        annotate=True,\n        show_percentage=True,\n        xlabel='',\n        ylabel='',\n        figsize=(12,\n        8),\n        ax=None,\n        order=True,\n        color=None):\n    if ax is None:\n        plt.figure(figsize=figsize)\n        if order:\n            ax = sns.countplot(y=variable, data=data, hue=hue, order=data[variable].value_counts().index, color=color if hue is None else None)\n        else:\n            ax = sns.countplot(y=variable, data=data, hue=hue, color=color if hue is None else None)\n    else:\n        if order:\n            sns.countplot(y=variable, data=data, hue=hue, order=data[variable].value_counts().index, ax=ax, color=color if hue is None else None)\n        else:\n            sns.countplot(y=variable, data=data, hue=hue, ax=ax, color=color if hue is None else None)\n        \n    sns.despine()\n    ax.set_title(title)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    if annotate:\n        for p in ax.patches:\n            count = p.get_width()\n            if show_percentage:\n                percentage = 100 * count / len(data)\n                if count &gt; 0:\n                    text = f'{int(count)} ({percentage:.2f}%)'\n                    ax.text(count + 0.6, p.get_y() + p.get_height() / 2., text, va=\"center\")\n            else:\n                if count &gt; 0:\n                    text = f'{int(count)}'\n                    ax.text(count + 0.6, p.get_y() + p.get_height() / 2., text, va=\"center\")\n    if ax is None:\n        plt.show()\n\n    return ax\n\n\nplot_countplot(\n    data,\n    variable='visit_id',\n    title='Assessments',\n    \n)\n\nax = plot_countplot(\n    data,\n    variable='stag_text',\n    hue='visit_id',\n    title='Assessments',\n    \n)\nax.legend(loc='lower center', bbox_to_anchor=(0.5, -0.2), ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfig, axes = plt.subplots(2, 2, figsize=(15, 8))\nfig.subplots_adjust(hspace=0.5)  # Increase the gap between rows\naxes[1][1].axis('off')  # Deactivate the axes[1][1]\npyddi.plot_countplot(\n    baseline,\n    variable='gender',\n    title=f'Subjects (N={len(baseline)})',\n    ax=axes[0][0],\n)\n\npyddi.plot_countplot(\n    data,\n    variable='visit_id',\n    title='Assessments',\n    ax=axes[0][1],\n)\n\nvilax = axes[1][0]\nsns.violinplot(\n    data=data[data['visit_id'] &lt; 4], \n    x=\"visit_id\", \n    y=\"available_age\",\n    cut=0, \n    split=True, \n    inner=\"point\", \n    ax=vilax, \n    hue='gender', \n    palette=\"Set2\", \n    dodge=True,\n    )\nvilax.set_title('Age distribution')\nvilax.set_xlabel('Visit')\nvilax.set_ylabel('')\n\nText(0, 0.5, '')\n\n\n\n\n\n\n\n\n\n\ndata[data['visit_id'] &lt; 4].available_age.min()\n\nnp.float64(58.0)\n\n\n\nlabel_cols = [col for col in data.columns if 'label' in col]\nlabel_cols\n\n['subject_label',\n 'subject_label_full',\n 'mh_label',\n 'cs_label',\n 'diag_label',\n 'csf_label',\n 'bioch_label',\n 'phyex_label',\n 'madrs_label',\n 'dat_label',\n 'petct_label']\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# mci = data.query('stag_text == \"MCI\"')\n# print(len(mci), mci['gds_15_total'].notna().sum(),mci['gds_15_total'].isna().sum())\n\ng = sns.FacetGrid(\n    data,\n    col='progression_type',\n    palette='husl',\n    height=4,\n    aspect=1.5\n)\n\ng.map(\n    sns.lineplot, \n    'years_from_baseline', \n    'gds_15_total', \n    # estimator=None, \n    # lw=1, \n    alpha=0.7, \n    units='subject_label'\n    )\n\n# sns.lineplot(\n#     data=mc,\n#     x='years_from_baseline',\n#     y='gds_15_total',\n#     estimator=None,\n#     units='subject_label',\n#     lw=1,\n#     alpha=0.7,\n#     # ax=axes[0]\n# )\n\n# sns.scatterplot(\n#     data=mci,\n#     x='years_from_baseline',\n#     y='gds_15_total',\n#     # ax=axes[0]\n# )\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n/var/folders/yx/9lb3jqpd79q884d6t5pcfxtc0000gn/T/ipykernel_8402/3215453481.py in ?()\n     10     height=4,\n     11     aspect=1.5\n     12 )\n     13 \n---&gt; 14 g.map(\n     15     sns.lineplot,\n     16     'years_from_baseline',\n     17     'gds_15_total',\n\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/seaborn/axisgrid.py in ?(self, func, *args, **kwargs)\n    673             # Get the actual data we are going to plot with\n    674             plot_data = data_ijk[list(args)]\n    675             if self._dropna:\n    676                 plot_data = plot_data.dropna()\n--&gt; 677             plot_args = [v for k, v in plot_data.iteritems()]\n    678 \n    679             # Some matplotlib functions don't handle pandas objects correctly\n    680             if func_module.startswith(\"matplotlib\"):\n\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/pandas/core/generic.py in ?(self, name)\n   6295             and name not in self._accessors\n   6296             and self._info_axis._can_hold_identifiers_and_holds_name(name)\n   6297         ):\n   6298             return self[name]\n-&gt; 6299         return object.__getattribute__(self, name)\n\nAttributeError: 'DataFrame' object has no attribute 'iteritems'\n\n\n\n\n\n\n\n\n\n\n\n# mci.query('years_from_baseline &gt; 0')[['subject_label', 'visit_id', 'years_from_baseline','mh_label', 'gds_15_total']]\ndata.progression_type.value_counts()\n\nprogression_type\nStable MCI               67\nStable CN                36\nCN to MCI                16\nStable non progressor     7\nName: count, dtype: int64\n\n\n\nmci.query('subject_label == \"D13023\"')[['subject_label', 'visit_id', 'years_from_baseline','mh_label', 'gds_15_total']]\n\n\n\n\n\n\n\n\nsubject_label\nvisit_id\nyears_from_baseline\nmh_label\ngds_15_total\n\n\n\n\n43\nD13023\n3\n7.030801\nD13023_mh_20250130_3\n3.0"
  }
]